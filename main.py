import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from transformers import pipeline
from PIL import Image
from config import *
import io
from base import *
from state import *
from aplha import  *
import redis





# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
state_bot = True
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
MAX_FILE_SIZE_MB = 5
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
pipe = pipeline("image-segmentation", model="briaai/RMBG-1.4", trust_remote_code=True)


create_users_table()
activity_today()
create_time_delay()
users_per_page = 3  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

original_photo_storage = {}
processed_photo_storage = {}

@dp.message_handler(content_types=[ContentType.PHOTO, ContentType.DOCUMENT])
async def handle_docs_photo(message: types.Message):
    unique_key = f"{message.chat.id}:{message.message_id}"
    file_id = message.photo[-1].file_id if message.photo else message.document.file_id
    original_photo_storage[unique_key] = file_id  # Store the original file_id
    keyboard = InlineKeyboardMarkup(row_width=2)
    button_add_alpha = InlineKeyboardButton("üëÜ–†–∞—Å—à–∏—Ä–∏—Ç—å —Ñ–æ–Ω", callback_data=f"add_alpha:{unique_key}")
    button_add_alpha_new = InlineKeyboardButton("üÜï –†–∞—Å—à–∏—Ä–∏—Ç—å —Ñ–æ–Ω", callback_data=f"new_add_alpha:{unique_key}")
    keyboard.add(button_add_alpha,button_add_alpha_new)


    if state_bot:
        user_id = message.from_user.id
        status = get_status_user(user_id)
        unlimited = get_unlimited_person(user_id)
        role = get_role_user(user_id)

        if status[0] != 'join':
            await message.reply('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')
            return

        if unlimited[0] != 'ON' and role[0] != 'admin':
            last_activity = get_last_activity(user_id)
            if last_activity:
                last_activity_time = datetime.datetime.strptime(last_activity, '%Y-%m-%d %H:%M:%S')
                current_time = datetime.datetime.now()
                time_diff = (current_time - last_activity_time).total_seconds()
                time_msg = get_time_msg()  # –ø–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

                if time_diff < time_msg[0]:
                    await message.reply(
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {time_msg[0] - time_diff:.0f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ.")
                    return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
        response = await message.reply(f"‚åõÔ∏è")
        file_info = await bot.get_file(file_id)
        photo_bytes = io.BytesIO()
        await bot.download_file(file_info.file_path, destination=photo_bytes)
        photo_bytes.seek(0)
        file_size_mb = photo_bytes.getbuffer().nbytes / (1024 * 1024)

        if file_size_mb > MAX_FILE_SIZE_MB:
            await message.reply(
                f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_FILE_SIZE_MB} –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pil_image = Image.open(photo_bytes)
        pillow_image = pipe(pil_image)  # –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏
        pillow_image = process_image_with_alpha_border(pillow_image)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª—å—Ñ–∞-–≥—Ä–∞–Ω–∏—Ü—ã

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        output = io.BytesIO()
        pillow_image.save(output, format='PNG')
        output.name = "ZeroBG_bot_@nmntzh.png"
        output.seek(0)
        await response.delete()
        processed_file_info = await bot.send_document(message.chat.id, document=output, reply_markup=keyboard)
        processed_file_id = processed_file_info.document.file_id
        processed_photo_storage[unique_key] = processed_file_id  # Store processed image file_id

        insert_or_update_user(user_id)
    else:
        await message.reply(SORRY)







@dp.callback_query_handler(lambda c: c.data.startswith('add_alpha'))
async def process_add_alpha(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    unique_key = callback_query.data.split(':')[1] + ':' + callback_query.data.split(':')[2]
    processed_file_id = processed_photo_storage.get(unique_key)

    if not processed_file_id:
        await callback_query.message.reply("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # Processed image retrieval and further processing for expanding the background
    file_info = await bot.get_file(processed_file_id)
    photo_bytes = io.BytesIO()
    await bot.download_file(file_info.file_path, destination=photo_bytes)
    photo_bytes.seek(0)

    # Open and process image using Pillow for adding alpha border
    image = Image.open(photo_bytes)
    processed_image = process_image_with_alpha_border_second(image)

    # Save the expanded image and send it back
    output = io.BytesIO()
    processed_image.save(output, format='PNG')
    output.name = "ZeroBG_bot_@nmntzh.png"
    output.seek(0)
    await bot.send_document(callback_query.message.chat.id, document=output)
    output.close()


@dp.message_handler(commands=['add_alpha'],state='*')
async def prompt_command_for_photo(message: types.Message, state: FSMContext):
    await Form.waiting_for_new_photo.set()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–æ–Ω–∞.")




@dp.callback_query_handler(lambda c: c.data.startswith('new_add_alpha'))
async def prompt_for_photo(callback_query: types.CallbackQuery, state: FSMContext):
    await Form.waiting_for_new_photo.set()
    await callback_query.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–æ–Ω–∞.")



@dp.message_handler(content_types=[ContentType.PHOTO, ContentType.DOCUMENT], state=Form.waiting_for_new_photo)
async def handle_new_photo(message: types.Message, state: FSMContext):
    await state.finish()
    photo_bytes = io.BytesIO()

    # Check if the incoming message is a photo or a document
    if message.photo:
        await message.photo[-1].download(destination_file=photo_bytes)
    elif message.document and message.document.mime_type.startswith('image/'):
        await message.document.download(destination_file=photo_bytes)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    photo_bytes.seek(0)
    image = Image.open(photo_bytes)

    # Process and expand the background using your custom function
    processed_image = process_image_with_alpha_border_second(image)

    # Save the processed image and send it back
    output = io.BytesIO()
    processed_image.save(output, format='PNG')
    output.name = "ZeroBG_bot_@nmntzh.png"
    output.seek(0)
    await bot.send_document(message.chat.id, document=output)
    output.close()
#
# @dp.message_handler(content_types=[ContentType.PHOTO, ContentType.DOCUMENT])
# async def handle_docs_photo(message: types.Message):
#     if state_bot:
#         photo_bytes = io.BytesIO()
#         user_id = message.from_user.id
#         status = get_status_user(user_id)
#         unlimited = get_unlimited_person(user_id)
#         role = get_role_user(user_id)
#         if status[0] == 'join':
#             if unlimited[0] == 'ON' or role[0] == 'admin':
#                 if message.content_type == ContentType.PHOTO:
#                     response = await message.reply(f"‚åõÔ∏è ")
#                     message_id = response.message_id
#                     photo = message.photo[-1]
#                     await photo.download(destination_file=photo_bytes)
#                 elif message.content_type == ContentType.DOCUMENT:
#                     if message.document.mime_type.startswith('image/') or message.document.mime_type.startswith('application/octet-stream'):
#                         response = await message.reply(f"‚åõÔ∏è ")
#                         message_id = response.message_id
#                         await message.document.download(destination_file=photo_bytes)
#                     else:
#                         await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
#                         return
#                 else:
#                     await message.reply("–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")
#                     return
#
#                 photo_bytes.seek(0)
#                 file_size_mb = photo_bytes.getbuffer().nbytes / (1024 * 1024)
#                 if file_size_mb > MAX_FILE_SIZE_MB:
#                     await message.reply(
#                         f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_FILE_SIZE_MB} –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
#                     return
#
#                 pil_image = Image.open(photo_bytes)
#                 pillow_image = pipe(pil_image)  # –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏
#                 pillow_image = process_image_with_alpha_border(pillow_image)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª—å—Ñ–∞-–≥—Ä–∞–Ω–∏—Ü—ã
#
#                 # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±—É—Ñ–µ—Ä
#                 output = io.BytesIO()
#                 pillow_image.save(output, format='PNG')
#                 output.name = "processed_image.png"  # –∑–∞–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
#                 output.seek(0)
#
#                 await bot.send_document(message.chat.id, document=output)
#                 await response.delete()
#
#                 insert_or_update_user(user_id)
#             elif unlimited[0] != 'ON':
#                 last_activity = get_last_activity(user_id)
#                 print('–≤—Ä–µ–º—è - ', last_activity)
#                 if last_activity:
#                     last_activity_time = datetime.datetime.strptime(last_activity, '%Y-%m-%d %H:%M:%S')
#                     current_time = datetime.datetime.now()
#                     time_diff = (current_time - last_activity_time).total_seconds()
#                     time_msg = get_time_msg()  # –ø–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
#
#                     if time_diff < time_msg[0]:
#                         await message.reply(
#                             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {time_msg[0] - time_diff:.0f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ.")
#                         return
#
#                     if message.content_type == ContentType.PHOTO:
#                         response = await message.reply(f"‚åõÔ∏è ")
#                         message_id = response.message_id
#                         photo = message.photo[-1]
#                         await photo.download(destination_file=photo_bytes)
#                     elif message.content_type == ContentType.DOCUMENT:
#                         if message.document.mime_type.startswith('image/') or message.document.mime_type.startswith('application/octet-stream'):
#                             response = await message.reply(f"‚åõÔ∏è ")
#                             message_id = response.message_id
#                             await message.document.download(destination_file=photo_bytes)
#                         else:
#                             await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
#                             return
#                     else:
#                         await message.reply("–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")
#                         return
#
#                     photo_bytes.seek(0)
#                     file_size_mb = photo_bytes.getbuffer().nbytes / (1024 * 1024)
#                     if file_size_mb > MAX_FILE_SIZE_MB:
#                         await message.reply(
#                             f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_FILE_SIZE_MB} –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
#                         return
#
#                     pil_image = Image.open(photo_bytes)
#                     pillow_image = pipe(pil_image)  # –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏
#                     pillow_image = process_image_with_alpha_border(pillow_image)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª—å—Ñ–∞-–≥—Ä–∞–Ω–∏—Ü—ã
#
#                     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±—É—Ñ–µ—Ä
#                     output = io.BytesIO()
#                     pillow_image.save(output, format='PNG')
#                     output.name = "processed_image.png"  # –∑–∞–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
#                     output.seek(0)
#
#                     await bot.send_document(message.chat.id, document=output)
#                     await response.delete()
#
#                     insert_or_update_user(user_id)
#                 else:
#                     if message.content_type == ContentType.PHOTO:
#                         response = await message.reply(f"‚åõÔ∏è ")
#                         message_id = response.message_id
#                         await message.reply(f"‚åõÔ∏è ")
#                         photo = message.photo[-1]
#                         await photo.download(destination_file=photo_bytes)
#                     elif message.content_type == ContentType.DOCUMENT:
#                         if message.document.mime_type.startswith('image/'):
#                             response = await message.reply(f"‚åõÔ∏è")
#                             message_id = response.message_id
#                             await message.document.download(destination_file=photo_bytes)
#                         else:
#                             await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
#                             return
#                     else:
#                         await message.reply("–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")
#                         return
#
#                     photo_bytes.seek(0)
#                     file_size_mb = photo_bytes.getbuffer().nbytes / (1024 * 1024)
#                     if file_size_mb > MAX_FILE_SIZE_MB:
#                         await message.reply(
#                             f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_FILE_SIZE_MB} –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
#                         return
#
#                     pil_image = Image.open(photo_bytes)
#                     pillow_image = pipe(pil_image)  # –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏
#                     pillow_image = process_image_with_alpha_border(pillow_image)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª—å—Ñ–∞-–≥—Ä–∞–Ω–∏—Ü—ã
#
#                     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±—É—Ñ–µ—Ä
#                     output = io.BytesIO()
#                     pillow_image.save(output, format='PNG')
#                     output.name = "processed_image.png"  # –∑–∞–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
#                     output.seek(0)
#
#                     await bot.send_document(message.chat.id, document=output)
#                     await response.delete()
#
#                     insert_or_update_user(user_id)
#         else:
#             await bot.send_message(message.chat.id, text='–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', parse_mode='HTML')
#     else:
#         await bot.send_message(message.chat.id, text=SORRY, parse_mode='HTML')
#
#
#




@dp.message_handler(commands=['start'],state="*")
async def handle_docs_photo(message: types.Message, state: FSMContext):
    await state.finish()
    count = get_delay_time()
    delay_time = count[0] if count is not None else 15


    if message.from_user.username == None:
        add_user(message.from_user.id, message.from_user.first_name,
                 datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), delay_time,  'OFF', 'join', 'user')
    else:
        add_user(message.from_user.id, message.from_user.username,
                 datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), delay_time,  'OFF', 'join', 'user')

    await bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É —É –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω.')

#Admin panel ---------------


@dp.message_handler(commands=['admin'],state='*')
async def handle_admin(message: types.Message, state: FSMContext ):
    await state.finish()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admin = get_admin_user(message.chat.id)

    if message.chat.id not in admin_ids and not admin == 'admin':
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    keyboard = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.InlineKeyboardButton(text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ ü§ñ", callback_data='status'),
                 types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üìù", callback_data='newsletter'),
                 types.InlineKeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ üìä", callback_data='analytics'))

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


#------------------------------



@dp.callback_query_handler(lambda call: call.data == "delay_day", state="*")
async def handle_day_bonus(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞—Ä–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    await BonusDayState.bonus.set()

@dp.message_handler(state=BonusDayState.bonus)
async def bon_state(message: types.Message, state: FSMContext):
    print('–ü–æ–ø–∞–ª')
    try:
        new_bonus_count = int(message.text)
        if new_bonus_count < 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
        update_bonus(new_bonus_count)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='analytics'))
        await message.reply(f'–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {new_bonus_count}', reply_markup=keyboard)
        await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@dp.callback_query_handler(lambda call: call.data == "analytics", state="*")
async def handle_bot_analitycs(callback_query: types.CallbackQuery):
    global state_bot
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    keyboard = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üîé", callback_data='search_user'))
    keyboard.add(types.InlineKeyboardButton(text='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ ‚åõÔ∏è', callback_data='delay_day'))
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data='back_menu'))
    text = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä'
    count = count_total_users()
    this_month = count_new_users_this_month()
    last_month = count_new_users_last_month()
    today_activity = count_active_users_today()
    text += f'\n\nüî¢ –û–±—â–µ–µ'
    text += f'\n‚îî –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = {count}'
    text += f'\n‚îî –ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü = {this_month}'
    text += f'\n‚îî –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü = {last_month}'
    text += f'\n‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞ = {count_blocked_users()}'
    text += f'\n‚îî –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è = {today_activity}'
    text += f'\n‚îî –ö–æ–ª-–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ = {len(admin_ids)}'
    text += f'\n‚îî –ö–æ–ª-–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ = {get_all_admin_from_bd()}'

    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == "search_user", state="*")
async def handle_bot_search_user(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    users = get_all_users()
    global users_per_page  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    current_page = 0

    async def send_users_page(chat_id, message_id, page):
        start_index = page * users_per_page
        end_index = min((page + 1) * users_per_page, len(users))
        user_names = users[start_index:end_index]

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for i in range(0, len(user_names)):
            user_id, user_name = user_names[i]  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º tuple
            keyboard.add(types.InlineKeyboardButton(text=user_name, callback_data=f'select_user_{user_id}_{user_name}'))

        if page > 0:
            keyboard.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data='back'))
        if end_index < len(users):
            keyboard.row(types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è©", callback_data='next'))

        keyboard.row(
            types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∏–Ω—É üîç", callback_data='search_by_username'),
            types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='analytics')
        )

        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

    await send_users_page(callback_query.message.chat.id, callback_query.message.message_id, current_page)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∏–Ω—É"
@dp.callback_query_handler(lambda call: call.data == "search_by_username", state="*")
async def handle_search_by_username(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –∏ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é',callback_data='search_user'))
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",reply_markup=keyboard)
    await SearchUserState.InputUsername.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∏–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=SearchUserState.InputUsername, content_types=types.ContentTypes.TEXT)
async def handle_username_input(message: types.Message, state: FSMContext):
    username = message.text
    users = get_all_users()

    found_users = [(user_id, user_name) for user_id, user_name in users if username.lower() in user_name.lower()]

    if found_users:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for user_id, user_name in found_users:
            keyboard.add(types.InlineKeyboardButton(text=user_name, callback_data=f'select_user_{user_id}_{user_name}'))

        await message.reply("–ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='search_user'))
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=keyboard)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ" –∏–ª–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda call: call.data in ['next', 'back'], state="*")
async def handle_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    users = get_all_users()
    global users_per_page # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    current_page = await state.get_state() or 0

    current_page = int(current_page)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

    if callback_query.data == 'next':
        current_page += 1
    elif callback_query.data == 'back':
        current_page -= 1

    await state.set_state(current_page)

    await send_users_page(callback_query.message.chat.id, callback_query.message.message_id, current_page)



async def send_users_page(chat_id, message_id, page):
    global users_per_page
    users = get_all_users()
    start_index = page * users_per_page
    end_index = min((page + 1) * users_per_page, len(users))
    user_names = users[start_index:end_index]

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(0, len(user_names)):
        user_id, user_name = user_names[i]  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º tuple
        user_name = str(user_name)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        keyboard.add(types.InlineKeyboardButton(text=user_name, callback_data=f'select_user_{user_id}_{user_name}'))

    if page > 0:
        keyboard.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data='back'))
    if end_index < len(users):
        keyboard.row(types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è©", callback_data='next'))

    keyboard.row(
        types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∏–Ω—É üîç", callback_data='search_by_username'),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='analytics')
    )

    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)



@dp.callback_query_handler(lambda call: call.data.startswith('select_user_'), state="*")
async def handle_select_user(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    unlimited = get_unlimited_person(user_id)
    role = get_role_user(user_id)
    status = get_status_user(user_id)
    keyboard = types.InlineKeyboardMarkup()
    unl_btn = ''
    role_btn = ''
    status_btn = ''
    text = f'ID: <b>{user_id}</b>'
    text += f'\n–õ–æ–≥–∏–Ω: <b> @{user_name}</b>'


    if unlimited[0] == 'ON':
        text += '\n–ë–µ–∑–ª–∏–º–∏—Ç: <b>–≤–∫–ª—é—á–µ–Ω</b>'
        unl_btn = types.InlineKeyboardButton(text='–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç',
                                             callback_data=f'off_unlimited_{user_id}_{user_name}')
    else:
        text += '\n–ë–µ–∑–ª–∏–º–∏—Ç: <b>–æ—Ç–∫–ª—é—á–µ–Ω</b>'
        unl_btn = types.InlineKeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç',
                                             callback_data=f'on_unlimited_{user_id}_{user_name}')

    if role[0] == 'user':
        text += f'\n\n–†–æ–ª—å: <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>'
        role_btn = types.InlineKeyboardButton(text=f'–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                                              callback_data=f'appoint_admin_{user_id}_{user_name}')
    else:
        text += f'\n\n–†–æ–ª—å: <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>'
        role_btn = types.InlineKeyboardButton(text=f'–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                                              callback_data=f'appoint_user_{user_id}_{user_name}')

    if status[0] == 'join':
        status_btn = types.InlineKeyboardButton(text=f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
                                                callback_data=f'block_user_{user_id}_{user_name}')
    else:
        status_btn = types.InlineKeyboardButton(text=f'–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
                                                callback_data=f'unblock_user_{user_id}_{user_name}')

    keyboard.add(role_btn)
    keyboard.add(status_btn)

    keyboard.add(unl_btn)
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data='search_user'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id, text=text,
                                reply_markup=keyboard, parse_mode='html')


# –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda call: call.data.startswith('block_user_'), state="*")
async def handle_block_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id

    update_status_kick(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id,
                                text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', reply_markup=keyboard, parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id)

@dp.callback_query_handler(lambda call: call.data.startswith('unblock_user_'), state="*")
async def handle_unblock_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    update_status_join(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id,
                                text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', reply_markup=keyboard, parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id)


# –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

@dp.callback_query_handler(lambda call: call.data.startswith('appoint_admin_'), state="*")
async def handle_appoint_admin(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    update_role_user_admin(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id,
                                text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', reply_markup=keyboard, parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id)


# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.callback_query_handler(lambda call: call.data.startswith('appoint_user_'), state="*")
async def handle_appoint_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    update_role_user_person(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id,
                                text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', reply_markup=keyboard,
                                parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id)


# –í–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–º–∏—Ç


@dp.callback_query_handler(lambda call: call.data.startswith('off_unlimited_'), state="*")
async def handle_off_unlimited(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    update_unlimited_off(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id, text='–ë–µ–∑–ª–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω',
                                reply_markup=keyboard, parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id)


# –í—ã–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–º–∏—Ç


@dp.callback_query_handler(lambda call: call.data.startswith('on_unlimited_'), state="*")
async def handle_off_unlimited(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    update_unlimited_on(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id, text='–ë–µ–∑–ª–º–∏—Ç –≤–∫–ª—é—á–µ–Ω',
                                reply_markup=keyboard, parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id)


@dp.callback_query_handler(lambda call: call.data == "newsletter", state="*")
async def handle_bot_newsletter(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    await NewsletterText.text.set()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é',callback_data='back_menu'))
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",reply_markup=keyboard)

@dp.message_handler(content_types=[types.ContentType.TEXT,types.ContentType.PHOTO], state=NewsletterText.text)
async def process_mixed_content(message: types.Message, state: FSMContext):
    # Initialize variables to store text and photo
    text = ""
    photo = None
    # Check if the message contains both text and photo
    if message.caption:
        text = message.caption
    if message.text:
        text = message.text
    if message.photo:
        photo = message.photo[-1].file_id

    # Get all user IDs from the database
    all_user_ids = get_all_user_ids()

    # Send the mixed content to each user individually
    for user_id in all_user_ids:
        try:
            if text and photo:
                # If both text and photo are present, send them together
                await bot.send_photo(user_id[0], photo, caption=text)
            elif text:
                # If only text is present, send the text
                await bot.send_message(user_id[0], text)
            elif photo:
                # If only photo is present, send the photo
                await bot.send_photo(user_id[0], photo)
        except Exception as e:
            print(f"Failed to send mixed content newsletter to user {user_id}: {e}")

    await state.finish()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    keyboard = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.InlineKeyboardButton(text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ ü§ñ",callback_data='status'), types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üìù",callback_data='newsletter'),
                 types.InlineKeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ üìä",callback_data='analytics'))

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data == "status", state="*")
async def handle_bot_state(callback_query: types.CallbackQuery):
    global state_bot
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id

    if state_bot:
        keyboard = types.InlineKeyboardMarkup()

        keyboard.add(types.InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ üî¥", callback_data='toggle_off'))
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_menu'))
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω üü¢",
                                    reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ üü¢", callback_data='toggle_on'))
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_menu'))

        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω üî¥",
                                    reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.startswith("toggle_"), state="*")
async def toggle_bot(callback_query: types.CallbackQuery):
    global state_bot
    message = callback_query.message
    chat_id = message.chat.id
    message_id = message.message_id

    if callback_query.data == "toggle_on":
        state_bot = True
        await handle_bot_state(callback_query)
    elif callback_query.data == "toggle_off":
        state_bot = False
        await handle_bot_state(callback_query)


@dp.callback_query_handler(lambda call: call.data == "back_menu", state="*")
async def handle_bot_back(callback_query: types.CallbackQuery):
    global state_bot
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    keyboard = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.InlineKeyboardButton(text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ ü§ñ", callback_data='status'),
                 types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üìù", callback_data='newsletter'),
                 types.InlineKeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ üìä", callback_data='analytics'))

    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=keyboard)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
